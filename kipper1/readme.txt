Release notes for KIPPER1 ROM
-----------------------------

19Sep2015 nac proto build.

This is a boot ROM for Kip Koon's "kipper" 6809 SBC.

To use it, you must have the jumper set as follows:

Jumpers: SER_I/O jumper 1-2
         ROM     jumper 1-2

The serial baud rate is (crystal/4)/64 ie 32.25kbaud for 8MHz crystal,
28.800kbaud for 7.3728Mhz crystal.

The ROM image is composed of 2 pieces of software build separately and then
"bolted together" by concatenating the .srec files.

The source files are impolitely derived from working multicomp software.

"Buggy" is a debug monitor created by Lennart Benschop.
"Camelforth" is a forth compiler created by Bradford J. Rodriguez.

Buggy is entered after reset. It occupies address region $E000-$FFFF
in the ROM.

Camelforth can be started from Buggy. It occupies address region $C000-$DFFF
in the ROM.

To start Camelforth from buggy:

.ddffe <return>           <--- YOU TYPE THIS
DFFE D5 16 8E E0 09 BF D3 F3-7E CD 03 1A FF 86 70 1F ........~.....p.
E00E 8B 0F 32 10 CE 74 00 8E-FA FE CE 72 80 C6 1E 8D ..2..t.....r....
E01E 37 8E FB 1C CE 70 00 C6-24 8D 2D 8D 33 1C 00 8E 7....p..$.-.3...
E02E 00 00 1F 12 CE 00 00 34-50 34 30 34 30 8E 72 9E .......4P4040.r.

the first two bytes (DF 16) show the start address.

.gd516 <return>           <--- YOU TYPE THIS
6809 CamelForth v1.0  25 Apr 95



-----------------------------------------------------------------------------
Address map:

+-----------------------+ $FFFF
|                       |
| 16Kbyte EPROM         |
|                       |
+-----------------------+ $C000
| Unused                |
+-----------------------+ $B000
| Unused                |
+-----------------------+ $A800
| 68B50 ACIA            |
+-----------------------+ $A000
| Unused                |
+-----------------------+ $9000
| Unused                |
+-----------------------+ $8000
|                       |
|                       |
|                       |
+ 32Kbyte RAM           + $4000
|                       |
|                       |
|                       |
+-----------------------+ $0000

-----------------------------------------------------------------------------
Notes

Both images have an unused region in them, between their start addresses and end
addresses (ie, both have space for modification and/or extension).

Both images are completely independent; whichever is running has total control
of the machine, memory space and stack.


camelforth is built from a source file named khromium.scr. This started as a
clone of chromium.scr. chromium.scr contains the source for both the original
smii hardware platform and the multicomp09 platform. In khromium.scr I have
replaced the multicomp09 stuff with stuff for kipper1. The following screens
are affected:

45 - load screen for kipper1 port.
46-48
51-57
49-50

The hex file generated by metacompilation is named 6809K.HEX and is designed
to live in ROM from $C000 upwards. Its entry point is the value in location
$DFFE (which would be the reset vector if this was built to live at the top
of memory).

The camelforth code assumes it is being started from buggy and that therefore
the ACIA is already initialised.

-----------------------------------------------------------------------------
How to blow the ROM

The file kipper1.hex has address records starting at $C000
The file kipper1_rom.hex has address records adjusted to start at $0000.

The second one is usually what you need for an EPROM programmer.

-----------------------------------------------------------------------------
Emulation

exec09 provides a simple kipper1 emulation

../../exec09/m6809-run -s kipper1 -d kipper1.hex
warning: no symbols for kipper1.hex
02:0x2009 1AFF                  ORCC  #$FF
(dbg) g
error: no such command
(dbg) c
BUGGY for Kipper SBC, 2015Sep17 (type h for help)
.h

Asm    {Aaddr}
Unasm  {U or Uaddr or Uaddr,length}
Calc   {Chexnum1{+|-hexnum2}}
Dump   {D or Daddr or Daddr,length}
Enter  {E or Eaddr or Eaddr bytes or Eaddr "string"}
Break  {B or Baddr. B displays, Baddr sets or clears breakpoint}
Find   {Faddr bytes or Faddr "string"}
Go     {G or Gaddr}
Inp    {Iaddr}
Jump   {Jaddr}
Move   {Maddr1,addr2,length}
Prog   {P}
Regs   {R or R<letter><hex>}
Srec   {SO<addr> or SS<addr>,<len> or S1<bytes> or S9<bytes>}
Trace  {T}
Xmodem {XSaddr,len XLaddr,len XX XOcrlf,filler, XSSaddr,len}
Help   {H}

.
.
6809 CamelForth v1.0  25 Apr 95

OK
OK 1 5 + . 6
OK

<ctrl-c>
<return>
02:0x0012 4F                    CLRA
(dbg) quit

-----------------------------------------------------------------------------
How to rebuild from source

It's fiddly to build camelforth from source (requires an old FORTH compiler
running under DOSBOX).

buggy is easy to rebuild, using the "Standard" AS9 assembler.

The script build_all_bin builds buggy and concatenates the two .hex files
together to create kipper1.hex which should be suitable for programming
into an EPROM.


-----------------------------------------------------------------------------
TODO list

I had to disable the dictionary overflow test (screen 5) because it is 1 byte
too aggressive. Normally works due to wrap from FFFF to 0. Need to fix this in
khromium and chromium.

Buggy has a bunch of todo in the code, which I need to do both for this
version and for the multicomp version.

